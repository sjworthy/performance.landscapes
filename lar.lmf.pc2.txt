results <- readRDS("lar.lmf.pc2.jags_results.RData")
lar.lmf.Comp.2.results=do.call(rbind,results) # combine output from 6 MCMC chains
lar.lmf.Comp.2.sample.df=lar.lmf.Comp.2.results[,c(3,5,6,8)] # extract columns of parameters needed

# subsetting results to only include last 20,000 iterations from each of the 6 chains
chain1=lar.lmf.Comp.2.results[c(30001:50000),]
chain2=lar.lmf.Comp.2.results[c(80001:100000),]
chain3=lar.lmf.Comp.2.results[c(130001:150000),]
chain4=lar.lmf.Comp.2.results[c(180001:200000),]
chain5=lar.lmf.Comp.2.results[c(230001:250000),]
chain6=lar.lmf.Comp.2.results[c(280001:300000),]

new.lar.lmf.Comp.2.results=rbind(chain1,chain2,chain3,chain4,chain5,chain6)
new.lar.lmf.Comp.2.results.par=new.lar.lmf.Comp.2.results[,c(3,5,6,8)]

# Sample random row of parameter values and calculate first partial derivative.

final.data=read.csv("Final.Data.csv", header=T, row.names=1)
lar.lmf.Comp.2.slopes=matrix(data=NA, nrow=1559, ncol=1000)

for(i in 1:1000){
row.sample=lar.lmf.Comp.2.sample.df[sample(nrow(lar.lmf.Comp.2.sample.df), 1),]
lar.lmf.Comp.2.output=row.sample[1]+row.sample[2]*final.data$log.lmf+row.sample[3]*final.data$Comp.2+row.sample[4]*(final.data$log.lmf*final.data$Comp.2)
lar.lmf.Comp.2.slopes[,i]=lar.lmf.Comp.2.output
}

lar.lmf.Comp.2=read.csv("lar.lmf.pc2.rgr.Parameters.csv", header=T, row.names=1) # mean parameter values from model

# value of first partial derivative from mean parameter values

lar.lmf.Comp.2.mean=lar.lmf.Comp.2[3,2]+lar.lmf.Comp.2[5,2]*final.data$log.lmf+lar.lmf.Comp.2[6,2]*final.data$Comp.2+lar.lmf.Comp.2[8,2]*(final.data$log.lmf*final.data$Comp.2)

# regression to get slope and intercept value for plotting

lar.lmf.Comp.2.mean.lm=lm(lar.lmf.Comp.2.mean~final.data$log.lmf*final.data$Comp.2)

plot((final.data$log.lmf*final.data$Comp.2),lar.lmf.Comp.2.mean,type="n")
abline(0.30420, 0.01824, col="black") # intercept and slope

# run linear models for 1000 iterations of the first partial derivative calculated above.

lm.1000=matrix(data=NA, ncol=2, nrow=1000)

for(i in 1:1000){
lin.mod=lm(lar.lmf.Comp.2.slopes[,i]~final.data$log.lmf*final.data$Comp.2)
lm.1000[i,1]=lin.mod$coefficients[1] # intercept
lm.1000[i,2]=lin.mod$coefficients[4] # slope
}
# Determine CIs for intercept and slope distributions

quant.intercept=quantile(lm.1000[,1], probs=c(0.025, 0.975))
quant.slope=quantile(lm.1000[,2], probs=c(0.025, 0.975))

plot((final.data$log.lmf*final.data$Comp.2),lar.lmf.Comp.2.mean, type="n")
abline(0.30420, 0.01824, col="black") # mean value
abline(0.2015005,0.000331546, col="gray") # lower limit
abline(0.4207359,0.035933937 , col="gray") # upper limit

# Plotting all of the first partial derivatives

for(i in 1:1000){
plot((final.data$log.lmf*final.data$Comp.2),lar.lmf.Comp.2.slopes[,i], col="gray",ylim=c(-0.20,0.02),ylab=NA, type="l")
par(new=TRUE)
}
par(new=TRUE)
plot((final.data$log.lmf*final.data$Comp.2),lar.lmf.Comp.2.mean, ylim=c(-0.20,0.02), ylab="slope of the lar*lmf*Light relationship with RGR", type="l")

# Code to produce 95% credible intervals around partial effects

# Slope based on mean parameter values
lar.lmf.pc2.HH=lar.lmf.pc2[3,2]+lar.lmf.pc2[5,2]*1.69+lar.lmf.pc2[6,2]*3.90+lar.lmf.pc2[8,2]*(1.69*3.90)
0.5854976
lar.lmf.pc2.LH=lar.lmf.pc2[3,2]+lar.lmf.pc2[5,2]*-5.98+lar.lmf.pc2[6,2]*3.90+lar.lmf.pc2[8,2]*(-5.98*3.90)
-0.4166339
lar.lmf.pc2.LL=lar.lmf.pc2[3,2]+lar.lmf.pc2[5,2]*-5.98+lar.lmf.pc2[6,2]*-5.41+lar.lmf.pc2[8,2]*(-5.98*-5.41)
0.4544581
lar.lmf.pc2.HL=lar.lmf.pc2[3,2]+lar.lmf.pc2[5,2]*1.69+lar.lmf.pc2[6,2]*-5.41+lar.lmf.pc2[8,2]*(1.69*-5.41)
0.1541132

# Sample dataframe of last 20,000 iterations of each MCMC chain, recalculate slope

lar.lmf.Comp.2.slopes.HH=matrix(data=NA, nrow=1000, ncol=1)
lar.lmf.Comp.2.slopes.LH=matrix(data=NA, nrow=1000, ncol=1)
lar.lmf.Comp.2.slopes.LL=matrix(data=NA, nrow=1000, ncol=1)
lar.lmf.Comp.2.slopes.HL=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lar.lmf.Comp.2.results.par[sample(nrow(new.lar.lmf.Comp.2.results.par), 1),]
lar.lmf.Comp.2.output.HH=row.sample[1]+row.sample[2]*1.69+row.sample[3]*3.90+row.sample[4]*(1.69*3.90)
lar.lmf.Comp.2.output.LH=row.sample[1]+row.sample[2]*-5.98+row.sample[3]*3.90+row.sample[4]*(-5.98*3.90)
lar.lmf.Comp.2.output.LL=row.sample[1]+row.sample[2]*-5.98+row.sample[3]*-5.41+row.sample[4]*(-5.98*-5.41)
lar.lmf.Comp.2.output.HL=row.sample[1]+row.sample[2]*1.69+row.sample[3]*-5.41+row.sample[4]*(1.69*-5.41)
lar.lmf.Comp.2.slopes.HH[i,]=lar.lmf.Comp.2.output.HH
lar.lmf.Comp.2.slopes.LH[i,]=lar.lmf.Comp.2.output.LH
lar.lmf.Comp.2.slopes.LL[i,]=lar.lmf.Comp.2.output.LL
lar.lmf.Comp.2.slopes.HL[i,]=lar.lmf.Comp.2.output.HL
}

high.soil=cbind(lar.lmf.Comp.2.slopes.HH, lar.lmf.Comp.2.slopes.LH)
write.csv(high.soil, file="lar.lmf.high.pc2.csv")
# 964/1000 have different slopes
# CI = 0.9527349 1.0000000
# 964/1000 have different slopes and direction matches mean slope direction
# CI = 0.9527349 1.0000000

low.soil=cbind(lar.lmf.Comp.2.slopes.LL, lar.lmf.Comp.2.slopes.HL)
write.csv(low.soil, file="lar.lmf.low.pc2.csv")

Slopes in the same direction.
t.test(LL, HL)
# p < 0.0001
t = 26.471
df = 1540.6
CI = 0.2794269 0.3241520
LL mean = 0.4557615
HL mean = 0.1539721

par(mfrow=c(1,2))
hist(low.soil.2[,1], xlab="Low LMF", main="Low Soil PC2")
abline(v=0.4557615, col="red")
hist(low.soil.2[,2], xlab="High LMF", main="Low Soil PC2")
abline(v=0.1539721, col="red")

## Intercepts

new.lar.lmf.Comp.2.intercept.par=new.lar.lmf.Comp.2.results[,c(1,4,2,7)]# extract columns of parameters needed

# Intercept based on mean parameter values
lar.lmf.pc2.HH=lar.lmf.pc2[1,2]+lar.lmf.pc2[4,2]*1.69+lar.lmf.pc2[2,2]*3.90+lar.lmf.pc2[7,2]*(1.69*3.90)
1.102746

# Sample dataframe of last 20,000 iterations of each MCMC chain, recalculate slope

lar.lmf.Comp.2.intercepts.HH=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lar.lmf.Comp.2.intercept.par[sample(nrow(new.lar.lmf.Comp.2.intercept.par), 1),]
lar.lmf.Comp.2.output.HH=row.sample[1]+row.sample[2]*1.69+row.sample[3]*3.90+row.sample[4]*(1.69*3.90)
lar.lmf.Comp.2.intercepts.HH[i,]=lar.lmf.Comp.2.output.HH
}

HH.quantile.intercept=quantile(lar.lmf.Comp.2.intercepts.HH[,1], probs=c(0.025, 0.975))

lower = -5.239998 upper = 8.526908 

lar.lmf.pc2.LH=lar.lmf.pc2[1,2]+lar.lmf.pc2[4,2]*-5.98+lar.lmf.pc2[2,2]*3.90+lar.lmf.pc2[7,2]*(-5.98*3.90)
-0.226833

lar.lmf.Comp.2.intercepts.LH=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lar.lmf.Comp.2.intercept.par[sample(nrow(new.lar.lmf.Comp.2.intercept.par), 1),]
lar.lmf.Comp.2.output.LH=row.sample[1]+row.sample[2]*-5.98+row.sample[3]*3.90+row.sample[4]*(-5.98*3.90)
lar.lmf.Comp.2.intercepts.LH[i,]=lar.lmf.Comp.2.output.LH
}

LH.quantile.intercept=quantile(lar.lmf.Comp.2.intercepts.LH[,1], probs=c(0.025, 0.975))

lower = -6.913685  upper = 7.882864 

lar.lmf.pc2.LL=lar.lmf.pc2[1,2]+lar.lmf.pc2[4,2]*-5.98+lar.lmf.pc2[2,2]*-5.41+lar.lmf.pc2[7,2]*(-5.98*-5.41)
1.44388

lar.lmf.Comp.2.intercepts.LL=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lar.lmf.Comp.2.intercept.par[sample(nrow(new.lar.lmf.Comp.2.intercept.par), 1),]
lar.lmf.Comp.2.output.LL=row.sample[1]+row.sample[2]*-5.98+row.sample[3]*-5.41+row.sample[4]*(-5.98*-5.41)
lar.lmf.Comp.2.intercepts.LL[i,]=lar.lmf.Comp.2.output.LL
}

LL.quantile.intercept=quantile(lar.lmf.Comp.2.intercepts.LL[,1], probs=c(0.025, 0.975))

lower = -5.459763 upper =9.469805

lar.lmf.pc2.HL=lar.lmf.pc2[1,2]+lar.lmf.pc2[4,2]*1.69+lar.lmf.pc2[2,2]*-5.41+lar.lmf.pc2[7,2]*(1.69*-5.41)
0.8226008

lar.lmf.Comp.2.intercepts.HL=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lar.lmf.Comp.2.intercept.par[sample(nrow(new.lar.lmf.Comp.2.intercept.par), 1),]
lar.lmf.Comp.2.output.HL=row.sample[1]+row.sample[2]*1.69+row.sample[3]*-5.41+row.sample[4]*(1.69*-5.41)
lar.lmf.Comp.2.intercepts.HL[i,]=lar.lmf.Comp.2.output.HL
}

HL.quantile.intercept=quantile(lar.lmf.Comp.2.intercepts.HL[,1], probs=c(0.025, 0.975))

lower = -5.413751 upper = 8.427650

# Plot Original
plot(final.data$log.lar, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate")
abline(-0.2655351,0.4429909, col="black", lwd=4)
abline(2.521027,-1.103356, col="blue", lwd=4)
abline(0.2403631,0.6726187, col="coral", lwd=4)
abline(0.2158185,-0.4383616, col="forest green", lwd=4)
legend("topright", legend=c("lmf  Light","High  High", "Low   High", "Low   Low", "High  Low"),
col=c("NA","black", "blue", "coral", "forest green"), lty=1, lwd=4)

# Plot of HH

plot(final.data$log.lar, final.data$log.rgr, type="n", xlab="Leaf Area Ratio", ylab="Relative Growth Rate", ylim=c(-5.3,8.6))
abline(1.102746,0.5854976, col="black", lwd=4) # original
abline(-5.239998, 0.2977768, col="gray", lwd=4) # lower
abline(8.526908 , 0.8562713  , col="gray", lwd=4) # upper

# Plot of LH
plot(final.data$log.lar, final.data$log.rgr, type="n", xlab="Leaf Area Ratio", ylab="Relative Growth Rate", ylim=c(-7.0,7.9))
abline(-0.226833,-0.4166339, col="blue", lwd=4)
abline(-6.913685 , -0.8862866 , col="gray", lwd=4)
abline(7.882864 , 0.0686845 , col="gray", lwd=4)

# Plot of LL
plot(final.data$log.lar, final.data$log.rgr, type="n", xlab="Leaf Area Ratio", ylab="Relative Growth Rate", ylim=c(-5.5,9.5))
abline(1.44388,0.4544581, col="coral", lwd=4)
abline(-5.459763, -0.1870288 , col="gray", lwd=4)
abline(9.469805, 1.1027902, col="gray", lwd=4)

# Plot of HL
plot(final.data$log.lar, final.data$log.rgr, type="n", xlab="Leaf Area Ratio", ylab="Relative Growth Rate", ylim=c(-5.5,8.5))
abline(0.8226008,0.1541132, col="forest green", lwd=4)
abline(-5.413751, -0.2126189 , col="gray", lwd=4)
abline(8.427650, 0.4837821  , col="gray", lwd=4)
