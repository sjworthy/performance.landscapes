results <- readRDS("lma.rmf.pc2.jags_results.RData")
lma.rmf.Comp.2.results=do.call(rbind,results) # combine output from 6 MCMC chains
lma.rmf.Comp.2.sample.df=lma.rmf.Comp.2.results[,c(3,5,6,8)] # extract columns of parameters needed

# subsetting results to only include last 20,000 iterations from each of the 6 chains
chain1=lma.rmf.Comp.2.results[c(30001:50000),]
chain2=lma.rmf.Comp.2.results[c(80001:100000),]
chain3=lma.rmf.Comp.2.results[c(130001:150000),]
chain4=lma.rmf.Comp.2.results[c(180001:200000),]
chain5=lma.rmf.Comp.2.results[c(230001:250000),]
chain6=lma.rmf.Comp.2.results[c(280001:300000),]

new.lma.rmf.Comp.2.results=rbind(chain1,chain2,chain3,chain4,chain5,chain6)
new.lma.rmf.Comp.2.results.par=new.lma.rmf.Comp.2.results[,c(3,5,6,8)]

# Sample random row of parameter values and calculate first partial derivative.

final.data=read.csv("Final.Data.csv", header=T, row.names=1)
lma.rmf.Comp.2.slopes=matrix(data=NA, nrow=1559, ncol=1000)

for(i in 1:1000){
row.sample=lma.rmf.Comp.2.sample.df[sample(nrow(lma.rmf.Comp.2.sample.df), 1),]
lma.rmf.Comp.2.output=row.sample[1]+row.sample[2]*final.data$log.rmf+row.sample[3]*final.data$Comp.2+row.sample[4]*(final.data$log.rmf*final.data$Comp.2)
lma.rmf.Comp.2.slopes[,i]=lma.rmf.Comp.2.output
}

lma.rmf.Comp.2=read.csv("lma.rmf.pc2.rgr.Parameters.csv", header=T, row.names=1) # mean parameter values from model

# value of first partial derivative from mean parameter values

lma.rmf.Comp.2.mean=lma.rmf.Comp.2[3,2]+lma.rmf.Comp.2[5,2]*final.data$log.rmf+lma.rmf.Comp.2[6,2]*final.data$Comp.2+lma.rmf.Comp.2[8,2]*(final.data$log.rmf*final.data$Comp.2)

# regression to get slope and intercept value for plotting

lma.rmf.Comp.2.mean.lm=lm(lma.rmf.Comp.2.mean~final.data$log.rmf*final.data$Comp.2)

plot((final.data$log.rmf*final.data$Comp.2),lma.rmf.Comp.2.mean,type="n")
abline(-0.064410, 0.025980 , col="black") # intercept and slope

# run linear models for 1000 iterations of the first partial derivative calculated above.

lm.1000=matrix(data=NA, ncol=2, nrow=1000)

for(i in 1:1000){
lin.mod=lm(lma.rmf.Comp.2.slopes[,i]~final.data$log.rmf*final.data$Comp.2)
lm.1000[i,1]=lin.mod$coefficients[1] # intercept
lm.1000[i,2]=lin.mod$coefficients[4] # slope
}
# Determine CIs for intercept and slope distributions

quant.intercept=quantile(lm.1000[,1], probs=c(0.025, 0.975))
quant.slope=quantile(lm.1000[,2], probs=c(0.025, 0.975))

plot((final.data$log.rmf*final.data$Comp.2),lma.rmf.Comp.2.mean, type="n")
abline(-0.064410, 0.025980, col="black") # mean value
abline(-0.1237620196,0.001135489, col="gray") # lower limit
abline(-0.0004199772 ,0.050253354, col="gray") # upper limit

# Plotting all of the first partial derivatives

for(i in 1:1000){
plot((final.data$log.rmf*final.data$Comp.2),lma.rmf.Comp.2.slopes[,i], col="gray",ylim=c(-0.20,0.02),ylab=NA, type="l")
par(new=TRUE)
}
par(new=TRUE)
plot((final.data$log.rmf*final.data$Comp.2),lma.rmf.Comp.2.mean, ylim=c(-0.20,0.02), ylab="slope of the LMA*rmf*Light relationship with RGR", type="l")

# Code to produce 95% credible intervals around partial effects

# Slope based on mean parameter values
lma.rmf.pc2.HH=lma.rmf.pc2[3,2]+lma.rmf.pc2[5,2]*3.32+lma.rmf.pc2[5,2]*3.90+lma.rmf.pc2[8,2]*(3.32*3.90)
0.3469226
lma.rmf.pc2.LH=lma.rmf.pc2[3,2]+lma.rmf.pc2[5,2]*-5.53+lma.rmf.pc2[5,2]*3.90+lma.rmf.pc2[8,2]*(-5.53*3.90)
-0.6416401
lma.rmf.pc2.LL=lma.rmf.pc2[3,2]+lma.rmf.pc2[5,2]*-5.53+lma.rmf.pc2[5,2]*-5.41+lma.rmf.pc2[8,2]*(-5.53*-5.41)
0.5992843
lma.rmf.pc2.HL=lma.rmf.pc2[3,2]+lma.rmf.pc2[5,2]*3.32+lma.rmf.pc2[5,2]*-5.41+lma.rmf.pc2[8,2]*(3.32*-5.41)
-0.5527362

# Sample dataframe of last 20,000 iterations of each MCMC chain, recalculate slope

lma.rmf.Comp.2.slopes.HH=matrix(data=NA, nrow=1000, ncol=1)
lma.rmf.Comp.2.slopes.LH=matrix(data=NA, nrow=1000, ncol=1)
lma.rmf.Comp.2.slopes.LL=matrix(data=NA, nrow=1000, ncol=1)
lma.rmf.Comp.2.slopes.HL=matrix(data=NA, nrow=1000, ncol=1)


for(i in 1:1000){
row.sample=new.lma.rmf.Comp.2.results.par[sample(nrow(new.lma.rmf.Comp.2.results.par), 1),]
lma.rmf.Comp.2.output.HH=row.sample[1]+row.sample[2]*3.32+row.sample[3]*3.90+row.sample[4]*(3.32*3.90)
lma.rmf.Comp.2.output.LH=row.sample[1]+row.sample[2]*-5.53+row.sample[3]*3.90+row.sample[4]*(-5.53*3.90)
lma.rmf.Comp.2.output.LL=row.sample[1]+row.sample[2]*-5.53+row.sample[3]*-5.41+row.sample[4]*(-5.53*-5.41)
lma.rmf.Comp.2.output.HL=row.sample[1]+row.sample[2]*3.32+row.sample[3]*-5.41+row.sample[4]*(3.32*-5.41)
lma.rmf.Comp.2.slopes.HH[i,]=lma.rmf.Comp.2.output.HH
lma.rmf.Comp.2.slopes.LH[i,]=lma.rmf.Comp.2.output.LH
lma.rmf.Comp.2.slopes.LL[i,]=lma.rmf.Comp.2.output.LL
lma.rmf.Comp.2.slopes.HL[i,]=lma.rmf.Comp.2.output.HL
}

high.soil=cbind(lma.rmf.Comp.2.slopes.HH, lma.rmf.Comp.2.slopes.LH)
write.csv(high.soil, file="lma.rmf.high.pc2.csv")
# 937/1000 have different slopes
# CI = 0.9228748 1.0000000
# 928/1000 have different slopes and direction matches mean slope direction
# CI = 0.913093 1.000000

low.soil=cbind(lma.rmf.Comp.2.slopes.LL, lma.rmf.Comp.2.slopes.HL)
write.csv(low.soil, file="lma.rmf.low.pc2.csv")
# 952/1000 have different slopes
# CI =   0.9393475 1.0000000
# 942/1000 have different slopes and direction matches mean slope direction
# CI =  0.9283396 1.0000000





## Intercepts

new.lma.rmf.Comp.2.intercept.par=new.lma.rmf.Comp.2.results[,c(1,4,2,7)]# extract columns of parameters needed

# Intercept based on mean parameter values
lma.rmf.pc2.HH=lma.rmf.pc2[1,2]+lma.rmf.pc2[4,2]*3.32+lma.rmf.pc2[2,2]*3.90+lma.rmf.pc2[7,2]*(3.32*3.90)
0.7289176

# Sample dataframe of last 20,000 iterations of each MCMC chain, recalculate slope

lma.rmf.Comp.2.intercepts.HH=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lma.rmf.Comp.2.intercept.par[sample(nrow(new.lma.rmf.Comp.2.intercept.par), 1),]
lma.rmf.Comp.2.output.HH=row.sample[1]+row.sample[2]*3.32+row.sample[3]*3.90+row.sample[4]*(3.32*3.90)
lma.rmf.Comp.2.intercepts.HH[i,]=lma.rmf.Comp.2.output.HH
}

HH.quantile.intercept=quantile(lma.rmf.Comp.2.intercepts.HH[,1], probs=c(0.025, 0.975))

lower = -6.550300 upper = 7.394789 

lma.rmf.pc2.LH=lma.rmf.pc2[1,2]+lma.rmf.pc2[4,2]*-5.53+lma.rmf.pc2[2,2]*3.90+lma.rmf.pc2[7,2]*(-5.53*3.90)
2.798641

lma.rmf.Comp.2.intercepts.LH=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lma.rmf.Comp.2.intercept.par[sample(nrow(new.lma.rmf.Comp.2.intercept.par), 1),]
lma.rmf.Comp.2.output.LH=row.sample[1]+row.sample[2]*-5.53+row.sample[3]*3.90+row.sample[4]*(-5.53*3.90)
lma.rmf.Comp.2.intercepts.LH[i,]=lma.rmf.Comp.2.output.LH
}

LH.quantile.intercept=quantile(lma.rmf.Comp.2.intercepts.LH[,1], probs=c(0.025, 0.975))

lower = -4.586917 upper = 9.329835 

lma.rmf.pc2.LL=lma.rmf.pc2[1,2]+lma.rmf.pc2[4,2]*-5.53+lma.rmf.pc2[2,2]*-5.41+lma.rmf.pc2[7,2]*(-5.53*-5.41)
1.698563

lma.rmf.Comp.2.intercepts.LL=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lma.rmf.Comp.2.intercept.par[sample(nrow(new.lma.rmf.Comp.2.intercept.par), 1),]
lma.rmf.Comp.2.output.LL=row.sample[1]+row.sample[2]*-5.53+row.sample[3]*-5.41+row.sample[4]*(-5.53*-5.41)
lma.rmf.Comp.2.intercepts.LL[i,]=lma.rmf.Comp.2.output.LL
}

LL.quantile.intercept=quantile(lma.rmf.Comp.2.intercepts.LL[,1], probs=c(0.025, 0.975))

lower = -5.889020 upper = 8.498434 

lma.rmf.pc2.HL=lma.rmf.pc2[1,2]+lma.rmf.pc2[4,2]*3.32+lma.rmf.pc2[2,2]*-5.41+lma.rmf.pc2[7,2]*(3.32*-5.41)
1.567559

lma.rmf.Comp.2.intercepts.HL=matrix(data=NA, nrow=1000, ncol=1)

for(i in 1:1000){
row.sample=new.lma.rmf.Comp.2.intercept.par[sample(nrow(new.lma.rmf.Comp.2.intercept.par), 1),]
lma.rmf.Comp.2.output.HL=row.sample[1]+row.sample[2]*3.32+row.sample[3]*-5.41+row.sample[4]*(3.32*-5.41)
lma.rmf.Comp.2.intercepts.HL[i,]=lma.rmf.Comp.2.output.HL
}

HL.quantile.intercept=quantile(lma.rmf.Comp.2.intercepts.HL[,1], probs=c(0.025, 0.975))

lower = -5.858186 upper = 8.243508

# Plot Original
plot(final.data$scale.log.lma, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate")
abline(-0.2655351,0.4429909, col="black", lwd=4)
abline(2.521027,-1.103356, col="blue", lwd=4)
abline(0.2403631,0.6726187, col="coral", lwd=4)
abline(0.2158185,-0.4383616, col="forest green", lwd=4)
legend("topright", legend=c("rmf  Light","High  High", "Low   High", "Low   Low", "High  Low"),
col=c("NA","black", "blue", "coral", "forest green"), lty=1, lwd=4)

# Plot of HH

plot(final.data$scale.log.lma, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate", ylim=c(-6.9,8.8))
abline(0.7289176,0.3469226, col="black", lwd=4) # original
abline(-6.550300, -0.0864719, col="gray", lwd=4) # lower
abline(7.394789, 0.6752840, col="gray", lwd=4) # upper

# Plot of LH
plot(final.data$scale.log.lma, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate", ylim=c(-5.3,11.0))
abline(2.798641,-0.6416401, col="blue", lwd=4)
abline(-4.586917, -1.40106051 , col="gray", lwd=4)
abline(9.329835 , -0.04582125  , col="gray", lwd=4)

# Plot of LL
plot(final.data$scale.log.lma, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate", ylim=c(-5.9,10.4))
abline(1.698563,0.5992843, col="coral", lwd=4)
abline(-5.889020, -0.07469132, col="gray", lwd=4)
abline(8.498434, 1.44910291, col="gray", lwd=4)

# Plot of HL
plot(final.data$scale.log.lma, final.data$log.rgr, type="n", xlab="Leaf Mass per Area", ylab="Relative Growth Rate", ylim=c(-7.2,8.8))
abline(1.567559,-0.5527362, col="forest green", lwd=4)
abline(-5.858186, -0.90433640, col="gray", lwd=4)
abline(8.243508, -0.01009505, col="gray", lwd=4)
